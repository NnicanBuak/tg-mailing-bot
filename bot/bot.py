import os
import asyncio
import json
import logging
from datetime import datetime, timedelta
import pathlib
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    ApplicationBuilder,
    Defaults,
    MessageHandler,
    filters,
    ConversationHandler,
)
from telegram.error import TelegramError
from database import Chat, Mailing, SendLog, db_session

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
base_dir = pathlib.Path(__file__).parent.absolute()
env_path = base_dir / ".env"

# –û—á–∏—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
keys_to_clear = ["ADMIN_IDS", "MINI_APP_URL", "TELEGRAM_BOT_TOKEN"]
for key in keys_to_clear:
    if key in os.environ:
        print(f"–£–¥–∞–ª–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: {key}")
        del os.environ[key]

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ .env
if env_path.exists():
    print(f"–§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω: {env_path}")

    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª .env –Ω–∞–ø—Ä—è–º—É—é
    try:
        print("–ß—Ç–µ–Ω–∏–µ .env —Ñ–∞–π–ª–∞ –Ω–∞–ø—Ä—è–º—É—é...")
        with open(env_path, "r") as f:
            for line in f:
                line = line.strip()
                if not line or line.startswith("#"):
                    continue

                if "=" in line:
                    key, value = line.split("=", 1)
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é
                    os.environ[key] = value
                    print(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è {key} = {value}")

        print("–§–∞–π–ª .env —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞–ø—Ä—è–º—É—é")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ .env —Ñ–∞–π–ª–∞ –Ω–∞–ø—Ä—è–º—É—é: {e}")

        # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ—Ä–µ–∑ python-dotenv –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
        try:
            from dotenv import load_dotenv

            load_dotenv(dotenv_path=env_path, override=True)
            print("–§–∞–π–ª .env –∑–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ python-dotenv —Å override=True")
        except ImportError:
            print("–ú–æ–¥—É–ª—å python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ .env —á–µ—Ä–µ–∑ python-dotenv: {e}")
else:
    print(f"–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {env_path}")
    # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ—Ä–µ–∑ python-dotenv –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
    try:
        from dotenv import load_dotenv

        load_dotenv(override=True)
        print("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —á–µ—Ä–µ–∑ python-dotenv –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ .env: {e}")

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
admin_ids_str = os.environ.get("ADMIN_IDS", "")
print(f"–ü–æ–ª—É—á–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ ADMIN_IDS –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: '{admin_ids_str}'")

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É —Å ID –≤ —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª
try:
    ADMIN_IDS = [int(id.strip()) for id in admin_ids_str.split(",") if id.strip()]
    print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ ADMIN_IDS: {ADMIN_IDS}")
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ADMIN_IDS: {e}")
    ADMIN_IDS = []

# URL –≤–∞—à–µ–≥–æ Mini App
MINI_APP_URL = os.environ.get("MINI_APP_URL", "https://example.com/mini_app")
print(f"–ü–æ–ª—É—á–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ MINI_APP_URL: '{MINI_APP_URL}'")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
ENTER_MESSAGE, ENTER_SCHEDULE, SELECT_RECIPIENTS = range(3)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
PAGE_SIZE = 5


async def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞"""
    print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ admin –¥–ª—è ID {user_id}. –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤: {ADMIN_IDS}")
    return user_id in ADMIN_IDS


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id

    if await is_admin(user_id):
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        keyboard = [
            [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="start_create")],
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫", callback_data="show_list")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
        ]

        markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. " "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            parse_mode=None,
            reply_markup=markup,
        )
    else:
        await update.message.reply_text(
            f"ID –∞–¥–º–∏–Ω–æ–≤: {ADMIN_IDS}\n"
            f"–í–∞—à ID: {user_id}\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π. "
            "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ –±–æ—Ç–∞.",
            parse_mode=None,
        )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    if not await is_admin(update.effective_user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    await update.message.reply_text(
        "–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n"
        "/create - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É\n"
        "/list - —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫\n"
        "/stats - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    )


# –°–û–ó–î–ê–ù–ò–ï –†–ê–°–°–´–õ–ö–ò - –ù–û–í–´–ô –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –§–û–†–ú–ê–¢
async def start_create_handler(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ callback"""
    query = update.callback_query
    await query.answer()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    context.user_data["temp_mailing"] = {
        "message_text": None,
        "schedule_type": None,
        "next_run_time": None,
        "is_recurring": False,
        "recurrence_interval": None,
    }

    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏ –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    keyboard = [
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="cancel_create")]
    ]

    await query.edit_message_text(
        "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏\n\n" "–®–∞–≥ 1/3: –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
    context.user_data["awaiting_input"] = "create_message"

    return ENTER_MESSAGE


async def create(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É"""
    if not await is_admin(update.effective_user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return ConversationHandler.END

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    context.user_data["temp_mailing"] = {
        "message_text": None,
        "schedule_type": None,
        "next_run_time": None,
        "is_recurring": False,
        "recurrence_interval": None,
    }

    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏ –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    keyboard = [
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="cancel_create")]
    ]

    await update.message.reply_text(
        "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏\n\n" "–®–∞–≥ 1/3: –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
    context.user_data["awaiting_input"] = "create_message"

    return ENTER_MESSAGE


async def cancel_create_handler(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    query = update.callback_query
    await query.answer()

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if "temp_mailing" in context.user_data:
        del context.user_data["temp_mailing"]
    if "awaiting_input" in context.user_data:
        del context.user_data["awaiting_input"]

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await main_menu_handler(update, context)

    return ConversationHandler.END


async def enter_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ callback
    if update.callback_query:
        # –ï—Å–ª–∏ —ç—Ç–æ callback, –∑–Ω–∞—á–∏—Ç –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        # –≠—Ç–æ —É–∂–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–µ—Ä–µ–∑ cancel_create_handler
        return ENTER_MESSAGE

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π
    if message_text.startswith("/"):
        # –≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è
        await update.message.reply_text(
            "–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–µ—Ä–≤–∞–Ω –∫–æ–º–∞–Ω–¥–æ–π. "
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create."
        )

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if "temp_mailing" in context.user_data:
            del context.user_data["temp_mailing"]
        if "awaiting_input" in context.user_data:
            del context.user_data["awaiting_input"]

        return ConversationHandler.END

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    context.user_data["temp_mailing"]["message_text"] = message_text

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [InlineKeyboardButton("üìÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="schedule_now")],
        [
            InlineKeyboardButton(
                "üïí –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É", callback_data="schedule_once"
            )
        ],
        [
            InlineKeyboardButton(
                "üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ", callback_data="schedule_daily"
            )
        ],
        [
            InlineKeyboardButton(
                "üìÜ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏", callback_data="schedule_weekly"
            )
        ],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="cancel_create")],
    ]

    await update.message.reply_text(
        f"–®–∞–≥ 2/3: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞
    context.user_data["awaiting_input"] = "create_schedule"

    return ENTER_SCHEDULE


async def enter_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ callback
    if update.callback_query:
        # –ï—Å–ª–∏ —ç—Ç–æ callback, –∑–Ω–∞—á–∏—Ç –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        # –≠—Ç–æ —É–∂–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–µ—Ä–µ–∑ cancel_create_handler
        return ENTER_SCHEDULE

    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    schedule_input = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π
    if schedule_input.startswith("/"):
        # –≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è
        await update.message.reply_text(
            "–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–µ—Ä–≤–∞–Ω –∫–æ–º–∞–Ω–¥–æ–π. "
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create."
        )

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if "temp_mailing" in context.user_data:
            del context.user_data["temp_mailing"]
        if "awaiting_input" in context.user_data:
            del context.user_data["awaiting_input"]

        return ConversationHandler.END

    try:
        parts = schedule_input.split(maxsplit=1)
        schedule_type = int(parts[0])

        now = datetime.now()
        temp_mailing = context.user_data["temp_mailing"]

        if schedule_type == 1:  # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å
            temp_mailing["next_run_time"] = now
            temp_mailing["is_recurring"] = False

        elif schedule_type == 2:  # –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è
            try:
                time_str = parts[1]
                next_run = datetime.strptime(time_str, "%Y-%m-%d %H:%M")
                temp_mailing["next_run_time"] = next_run
                temp_mailing["is_recurring"] = False
            except ValueError:
                await update.message.reply_text(
                    "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–Ω–æ–≤–∞:"
                )
                return ENTER_SCHEDULE

        elif schedule_type == 3:  # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ
            try:
                time_str = parts[1]
                hours, minutes = map(int, time_str.split(":"))
                next_run = datetime(now.year, now.month, now.day, hours, minutes)

                if next_run < now:
                    next_run = next_run + timedelta(days=1)

                temp_mailing["next_run_time"] = next_run
                temp_mailing["is_recurring"] = True
                temp_mailing["recurrence_interval"] = "daily"
            except ValueError:
                await update.message.reply_text(
                    "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–Ω–æ–≤–∞:"
                )
                return ENTER_SCHEDULE

        elif schedule_type == 4:  # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ
            try:
                time_str = parts[1]
                hours, minutes = map(int, time_str.split(":"))
                next_run = datetime(now.year, now.month, now.day, hours, minutes)

                if next_run < now:
                    next_run = next_run + timedelta(days=1)

                temp_mailing["next_run_time"] = next_run
                temp_mailing["is_recurring"] = True
                temp_mailing["recurrence_interval"] = "weekly"
            except ValueError:
                await update.message.reply_text(
                    "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–Ω–æ–≤–∞:"
                )
                return ENTER_SCHEDULE
        else:
            await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 1, 2, 3 –∏–ª–∏ 4.\n"
                "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –∏ –≤—Ä–µ–º—è —Å–Ω–æ–≤–∞:"
            )
            return ENTER_SCHEDULE

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        await update.message.reply_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n" f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –∏ –≤—Ä–µ–º—è —Å–Ω–æ–≤–∞:"
        )
        return ENTER_SCHEDULE

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    keyboard = [
        [
            InlineKeyboardButton(
                "–í—ã–±—Ä–∞—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π",
                web_app={"url": f"{MINI_APP_URL}?mailing_id=temp"},
            )
        ],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="cancel_create")],
    ]

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
    context.user_data["awaiting_input"] = "create_recipients"

    await update.message.reply_text(
        f"–®–∞–≥ 3/3: –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )

    return SELECT_RECIPIENTS


async def finish_create(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π"""
    # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤ –ë–î –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    temp_mailing = context.user_data.get("temp_mailing", {})
    user_id = update.effective_user.id

    with db_session() as session:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É
        mailing = Mailing(
            created_by=user_id,
            message_text=temp_mailing.get("message_text"),
            next_run_time=temp_mailing.get("next_run_time"),
            is_recurring=temp_mailing.get("is_recurring", False),
            recurrence_interval=temp_mailing.get("recurrence_interval"),
        )
        session.add(mailing)
        session.commit()
        mailing_id = mailing.mailing_id

        # –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π (–µ—Å–ª–∏ –æ–Ω–∏ —É–∂–µ –±—ã–ª–∏ –≤—ã–±—Ä–∞–Ω—ã)
        selected_chats = temp_mailing.get("selected_chats", [])
        if selected_chats:
            for chat_id in selected_chats:
                chat = session.query(Chat).filter_by(chat_id=chat_id).first()
                if chat:
                    mailing.recipients.append(chat)
            session.commit()

    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if "temp_mailing" in context.user_data:
        del context.user_data["temp_mailing"]
    if "awaiting_input" in context.user_data:
        del context.user_data["awaiting_input"]

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏
    # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —É –Ω–∞—Å –Ω–µ—Ç callback_query, –ø–æ—ç—Ç–æ–º—É —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –≤—Ä—É—á–Ω—É—é
    context.user_data["last_mailing_id"] = mailing_id

    # –°–æ–æ–±—â–∞–µ–º –æ —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    await update.message.reply_text(f"–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ (ID: {mailing_id})!")

    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π update –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é
    class FakeCallback:
        def __init__(self, data):
            self.data = data

        async def answer(self):
            pass

        async def edit_message_text(self, text, reply_markup=None):
            await update.message.reply_text(text, reply_markup=reply_markup)

    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π update.callback_query –¥–ª—è show_mailing_menu
    update.callback_query = FakeCallback(f"mailing:{mailing_id}")
    await show_mailing_menu(update, context, mailing_id)
    update.callback_query = None

    return ConversationHandler.END


# –°–ü–ò–°–û–ö –†–ê–°–°–´–õ–û–ö –° –ü–ê–ì–ò–ù–ê–¶–ò–ï–ô –ò –ö–ù–û–ü–ö–ê–ú–ò
async def list_mailings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞"""
    if not await is_admin(update.effective_user.id):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å - –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ callback_query
        if update.message:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        elif update.callback_query:
            await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    context.user_data["page"] = 0

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫
    # –ï—Å–ª–∏ –≤—ã–∑–æ–≤ –∏–∑ callback_query, –ø—Ä–µ–¥–∞–µ–º edit=True
    await show_mailings_page(update, context, edit=bool(update.callback_query))


async def show_mailings_page(
    update: Update, context: ContextTypes.DEFAULT_TYPE, edit=False
) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫"""
    page = context.user_data.get("page", 0)

    with db_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Å—ã–ª–æ–∫ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        total_mailings = session.query(Mailing).count()

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        mailings = (
            session.query(Mailing)
            .order_by(Mailing.mailing_id.desc())
            .offset(page * PAGE_SIZE)
            .limit(PAGE_SIZE)
            .all()
        )

        if not mailings and total_mailings > 0:
            # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—É—Å—Ç–∞, –Ω–æ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            context.user_data["page"] = max(0, page - 1)
            await show_mailings_page(update, context, edit)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–ø–∏—Å–∫–∞
        if total_mailings == 0:
            list_text = "–†–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            keyboard = [
                [
                    InlineKeyboardButton(
                        "üìù –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="start_create"
                    )
                ],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
            ]
        else:
            list_text = f"–°–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{(total_mailings + PAGE_SIZE - 1) // PAGE_SIZE}):\n\n"

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
            keyboard = []
            for mailing in mailings:
                # –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—Å—ã–ª–∫–µ
                m_text = f"ID: {mailing.mailing_id} | "

                if mailing.next_run_time:
                    if mailing.is_recurring:
                        m_text += f"{mailing.recurrence_interval} –≤ {mailing.next_run_time.strftime('%H:%M')}"
                    else:
                        m_text += f"{mailing.next_run_time.strftime('%Y-%m-%d %H:%M')}"
                else:
                    m_text += "–ù–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞"

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —ç—Ç–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
                keyboard.append(
                    [
                        InlineKeyboardButton(
                            m_text, callback_data=f"mailing:{mailing.mailing_id}"
                        )
                    ]
                )

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            pagination_buttons = []

            if page > 0:
                pagination_buttons.append(
                    InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="page:prev")
                )

            if (page + 1) * PAGE_SIZE < total_mailings:
                pagination_buttons.append(
                    InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data="page:next")
                )

            if pagination_buttons:
                keyboard.append(pagination_buttons)

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            keyboard.append(
                [
                    InlineKeyboardButton(
                        "üìù –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="start_create"
                    )
                ]
            )
            keyboard.append(
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    markup = InlineKeyboardMarkup(keyboard)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫ –≤—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è - —á–µ—Ä–µ–∑ callback –∏–ª–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É
    if edit or update.callback_query:
        # –ï—Å–ª–∏ –µ—Å—Ç—å callback_query, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è edit_message_text
        if hasattr(update, "callback_query") and update.callback_query:
            await update.callback_query.edit_message_text(
                text=list_text, reply_markup=markup
            )
        else:
            # –≠—Ç–æ –Ω–µ–ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Å edit=True, –Ω–æ –±–µ–∑ callback_query
            # –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥—Ö–æ–¥ –∏–∑ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            pass
    else:
        # –û–±—ã—á–Ω—ã–π –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(text=list_text, reply_markup=markup)


async def show_mailing_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
    try:
        if hasattr(update, "callback_query") and update.callback_query:
            query = update.callback_query
            await query.answer()
            data = query.data
            mailing_id = int(data.split(":")[1])
        elif update.message:
            data = update.message.text
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å ID –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
            try:
                mailing_id = int(data.split(":")[1])
            except (ValueError, IndexError):
                # –ï—Å–ª–∏ ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∏–ø–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø—Ä–æ–±—É–µ–º –¥–æ—Å—Ç–∞—Ç—å –∏–∑ user_data
                mailing_id = context.user_data.get("last_mailing_id")
                if not mailing_id:
                    await update.message.reply_text(
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID —Ä–∞—Å—Å—ã–ª–∫–∏."
                    )
                    return
        else:
            return

        with db_session() as session:
            mailing = session.query(Mailing).filter_by(mailing_id=mailing_id).first()

            if not mailing:
                if hasattr(update, "callback_query") and update.callback_query:
                    await update.callback_query.edit_message_text(
                        "–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
                    )
                else:
                    await update.message.reply_text("–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            text = f"üì® <b>–ú–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏ ID {mailing_id}</b>\n\n"
            text += f"üìù <b>–¢–µ–∫—Å—Ç:</b> {mailing.message_text[:100]}{'...' if len(mailing.message_text) > 100 else ''}\n"

            if mailing.next_run_time:
                schedule = mailing.next_run_time.strftime("%Y-%m-%d %H:%M")
                if mailing.is_recurring:
                    if mailing.recurrence_interval == "daily":
                        text += f"üïí <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b> –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ {mailing.next_run_time.strftime('%H:%M')}\n"
                    elif mailing.recurrence_interval == "weekly":
                        # –ü–æ–ª—É—á–∞–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
                        if mailing.recurrence_days:
                            days_list = mailing.recurrence_days.split(",")
                            weekdays = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
                            selected_days = [
                                weekdays[int(d)]
                                for d in days_list
                                if d.isdigit() and 0 <= int(d) < 7
                            ]
                            days_str = ", ".join(selected_days)
                            text += f"üïí <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b> –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ ({days_str}) –≤ {mailing.next_run_time.strftime('%H:%M')}\n"
                        else:
                            text += f"üïí <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b> –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –≤ {mailing.next_run_time.strftime('%H:%M')}\n"
                else:
                    text += f"üïí <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞:</b> {schedule}\n"
            else:
                text += "üïí <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b> –Ω–µ –∑–∞–¥–∞–Ω–æ\n"

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã ORM
            user_recipients = 0
            group_recipients = 0

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–æ–π —Ä–∞—Å—Å—ã–ª–∫–æ–π
            for chat in mailing.recipients:
                if chat.type == "private":
                    user_recipients += 1
                elif chat.type in ["group", "supergroup", "channel"]:
                    group_recipients += 1

            total_recipients = user_recipients + group_recipients

            text += f"üë• <b>–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</b> {total_recipients} (üë§ {user_recipients} / üë• {group_recipients})\n\n"

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
            logs = session.query(SendLog).filter_by(mailing_id=mailing_id).all()
            successful = sum(1 for log in logs if log.status == "success")
            failed = sum(1 for log in logs if log.status == "failed")

            text += "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:</b>\n"
            text += f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}\n"
            text += f"‚ùå –û—à–∏–±–æ–∫: {failed}\n"

            if total_recipients > 0:
                rate = (successful / total_recipients) * 100
                text += f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {rate:.1f}%\n"

            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard = []

            if total_recipients > 0 and mailing.message_text:
                keyboard.append(
                    [
                        InlineKeyboardButton(
                            "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data=f"send:{mailing_id}"
                        )
                    ]
                )

            keyboard.append(
                [
                    InlineKeyboardButton(
                        "‚úèÔ∏è –†–µ–¥. —Ç–µ–∫—Å—Ç", callback_data=f"edit_message:{mailing_id}"
                    ),
                    InlineKeyboardButton(
                        "üïí –†–µ–¥. —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
                        callback_data=f"edit_schedule:{mailing_id}",
                    ),
                ]
            )
            keyboard.append(
                [
                    InlineKeyboardButton(
                        "üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–∏",
                        web_app={"url": f"{MINI_APP_URL}?mailing_id={mailing_id}"},
                    )
                ]
            )
            keyboard.append(
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_list")]
            )

            markup = InlineKeyboardMarkup(keyboard)

            # –û—Ç–ø—Ä–∞–≤–∫–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if hasattr(update, "callback_query") and update.callback_query:
                await update.callback_query.edit_message_text(
                    text=text, reply_markup=markup, parse_mode="HTML"
                )
            else:
                await update.message.reply_text(
                    text=text, reply_markup=markup, parse_mode="HTML"
                )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_mailing_menu: {e}")
        try:
            if hasattr(update, "callback_query") and update.callback_query:
                await update.callback_query.edit_message_text(
                    f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏: {str(e)}",
                    reply_markup=InlineKeyboardMarkup(
                        [
                            [
                                InlineKeyboardButton(
                                    "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_list"
                                )
                            ]
                        ]
                    ),
                )
            elif update.message:
                await update.message.reply_text(
                    f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏: {str(e)}",
                    reply_markup=InlineKeyboardMarkup(
                        [
                            [
                                InlineKeyboardButton(
                                    "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_list"
                                )
                            ]
                        ]
                    ),
                )
        except Exception as inner_e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ show_mailing_menu: {inner_e}")


async def handle_pagination(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    query = update.callback_query
    await query.answer()

    action = query.data.split(":")[1]

    if action == "prev":
        context.user_data["page"] = max(0, context.user_data.get("page", 0) - 1)
    elif action == "next":
        context.user_data["page"] = context.user_data.get("page", 0) + 1

    await show_mailings_page(update, context, edit=True)


async def finish_create_handler(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    query = update.callback_query
    await query.answer()

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è
    return await finish_create(update, context)


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –∏ –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
async def handle_command_during_conversation(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """–ü—Ä–µ—Ä—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ"""
    mailing_id = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å UnboundLocalError

    # –ï—Å–ª–∏ –±—ã–ª –∞–∫—Ç–∏–≤–Ω—ã–π —à–∞–≥, –æ—Ç–º–µ–Ω—è–µ–º –µ–≥–æ
    if "awaiting_input" in context.user_data:
        awaiting_type = context.user_data.pop("awaiting_input", None)
        logger.info(f"–î–∏–∞–ª–æ–≥ '{awaiting_type}' –ø—Ä–µ—Ä–≤–∞–Ω –∫–æ–º–∞–Ω–¥–æ–π: {update.message.text}")

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data.pop("temp_mailing", None)

        await update.message.reply_text("–ü—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–æ–π.")

    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å mailing_id –∏–∑ callback_query, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if hasattr(update, "callback_query") and update.callback_query:
        try:
            mailing_id = int(update.callback_query.data.split(":")[1])
            await update.callback_query.answer()
        except (ValueError, IndexError):
            await update.callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID —Ä–∞—Å—Å—ã–ª–∫–∏.")
            return

    # –ï—Å–ª–∏ ID —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if mailing_id is None:
        return

    with db_session() as session:
        mailing = session.query(Mailing).filter_by(mailing_id=mailing_id).first()

        if not mailing:
            await update.message.reply_text("–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        context.user_data["last_mailing_id"] = mailing_id

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏
    await show_mailing_menu(update, context)


# –û–¢–ü–†–ê–í–ö–ê –†–ê–°–°–´–õ–ö–ò
async def send_mailing_now(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Å–µ–π—á–∞—Å"""
    query = update.callback_query
    await query.answer()

    try:
        mailing_id = int(query.data.split(":")[1])

        with db_session() as session:
            mailing = session.query(Mailing).filter_by(mailing_id=mailing_id).first()

            if not mailing:
                await query.edit_message_text("–û—à–∏–±–∫–∞: —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            if not mailing.message_text:
                await query.edit_message_text(
                    "–î–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.",
                    reply_markup=InlineKeyboardMarkup(
                        [
                            [
                                InlineKeyboardButton(
                                    "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é",
                                    callback_data=f"mailing:{mailing_id}",
                                )
                            ]
                        ]
                    ),
                )
                return

            recipients = [
                (chat.chat_id, chat.title or str(chat.chat_id))
                for chat in mailing.recipients
            ]

            if not recipients:
                await query.edit_message_text(
                    "–î–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –ø–æ–ª—É—á–∞—Ç–µ–ª–∏.",
                    reply_markup=InlineKeyboardMarkup(
                        [
                            [
                                InlineKeyboardButton(
                                    "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é",
                                    callback_data=f"mailing:{mailing_id}",
                                )
                            ]
                        ]
                    ),
                )
                return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        status_text = (
            f"–ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏ ID {mailing_id}...\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(recipients)}\n"
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: 0\n"
            f"–û—à–∏–±–æ–∫: 0\n"
            f"–ü—Ä–æ–≥—Ä–µ—Å—Å: 0%"
        )

        status_msg = await query.edit_message_text(
            text=status_text,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                            callback_data=f"refresh_status:{mailing_id}",
                        )
                    ]
                ]
            ),
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        context.application.create_task(
            perform_mailing(context.bot, mailing_id, status_msg)
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await query.edit_message_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_list"
                        )
                    ]
                ]
            ),
        )


async def refresh_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    query = update.callback_query
    await query.answer()

    try:
        mailing_id = int(query.data.split(":")[1])

        with db_session() as session:
            mailing = session.query(Mailing).filter_by(mailing_id=mailing_id).first()

            if not mailing:
                await query.edit_message_text("–û—à–∏–±–∫–∞: —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
            total_recipients = len(mailing.recipients)

            logs = session.query(SendLog).filter_by(mailing_id=mailing_id).all()
            successful = sum(1 for log in logs if log.status == "success")
            failed = sum(1 for log in logs if log.status == "failed")

            progress = (
                ((successful + failed) / total_recipients * 100)
                if total_recipients > 0
                else 0
            )

            status_text = (
                f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ID {mailing_id}...\n"
                f"–í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {total_recipients}\n"
                f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {successful}\n"
                f"–û—à–∏–±–æ–∫: {failed}\n"
                f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}%"
            )

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            keyboard = []
            if successful + failed < total_recipients:
                # –†–∞—Å—Å—ã–ª–∫–∞ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                keyboard.append(
                    [
                        InlineKeyboardButton(
                            "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                            callback_data=f"refresh_status:{mailing_id}",
                        )
                    ]
                )
            else:
                # –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                keyboard.append(
                    [
                        InlineKeyboardButton(
                            "‚¨ÖÔ∏è –ö –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data=f"mailing:{mailing_id}"
                        )
                    ]
                )

            await query.edit_message_text(
                text=status_text, reply_markup=InlineKeyboardMarkup(keyboard)
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await query.edit_message_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_list"
                        )
                    ]
                ]
            ),
        )


async def handle_webapp_data(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏–∑ Mini App"""
    if not await is_admin(update.effective_user.id):
        return

    data = json.loads(update.effective_message.web_app_data.data)
    mailing_id = data.get("mailing_id")
    selected_chats = data.get("selected_chats", [])

    if not isinstance(selected_chats, list):
        await update.message.reply_text("–ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Mini App.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–¥–µ—Ç –ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π
    if mailing_id == "temp":
        # –≠—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if "temp_mailing" in context.user_data:
            context.user_data["temp_mailing"]["selected_chats"] = selected_chats

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–æ–≤ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            keyboard = [
                [
                    InlineKeyboardButton(
                        "üë§ –¢–∏–ø—ã –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π", callback_data="select_recipient_types"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="finish_create"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="cancel_create"
                    )
                ],
            ]

            await update.message.reply_text(
                f"–ü–æ–ª—É—á–∞—Ç–µ–ª–∏ –¥–ª—è –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—ã–±—Ä–∞–Ω—ã.\n"
                f"–í—ã–±—Ä–∞–Ω–æ {len(selected_chats)} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π.\n\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å, –∫–∞–∫–∏–º —Ç–∏–ø–∞–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É "
                f"(–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤—Å–µ–º), –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ:",
                reply_markup=InlineKeyboardMarkup(keyboard),
            )

        else:
            await update.message.reply_text(
                "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–∞."
            )


async def show_recipients_types_selector(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä —Ç–∏–ø–æ–≤ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π"""
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    mailing_id = context.user_data.get("edit_mailing_id")

    if mailing_id:
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏
        with db_session() as session:
            mailing = session.query(Mailing).filter_by(mailing_id=mailing_id).first()
            if mailing:
                send_to_users = getattr(mailing, "send_to_users", True)
                send_to_groups = getattr(mailing, "send_to_groups", True)
            else:
                send_to_users = True
                send_to_groups = True
    else:
        # –ù–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
        temp_mailing = context.user_data.get("temp_mailing", {})
        send_to_users = temp_mailing.get("send_to_users", True)
        send_to_groups = temp_mailing.get("send_to_groups", True)

    # –°–æ–∑–¥–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã
    users_checkbox = "‚úÖ" if send_to_users else "‚òê"
    groups_checkbox = "‚úÖ" if send_to_groups else "‚òê"

    keyboard = [
        [
            InlineKeyboardButton(
                f"{users_checkbox} –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
                callback_data="toggle_users",
            )
        ],
        [
            InlineKeyboardButton(
                f"{groups_checkbox} –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –≥—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª—ã",
                callback_data="toggle_groups",
            )
        ],
        [
            InlineKeyboardButton(
                "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="recipients_types_confirmed"
            )
        ],
        [
            InlineKeyboardButton(
                "‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data=(
                    "cancel_create" if not mailing_id else f"mailing:{mailing_id}"
                ),
            )
        ],
    ]

    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )


async def process_schedule_selection(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    schedule_type = query.data
    temp_mailing = context.user_data["temp_mailing"]
    now = datetime.now()

    if schedule_type == "schedule_now":
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å
        temp_mailing["next_run_time"] = now
        temp_mailing["is_recurring"] = False
        temp_mailing["recurrence_interval"] = None

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        return await show_recipients_types_selector(update, context)

    elif schedule_type == "schedule_once":
        # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
        await show_date_picker(query, context)
        return ENTER_SCHEDULE

    elif schedule_type == "schedule_daily":
        # –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ - –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
        temp_mailing["is_recurring"] = True
        temp_mailing["recurrence_interval"] = "daily"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
        await show_time_picker(query, context)
        return ENTER_SCHEDULE

    elif schedule_type == "schedule_weekly":
        # –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏ - –≤—ã–±–æ—Ä –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        temp_mailing["is_recurring"] = True
        temp_mailing["recurrence_interval"] = "weekly"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        await show_weekday_picker(query, context)
        return ENTER_SCHEDULE

    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        await query.edit_message_text(
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="cancel_create"
                        )
                    ]
                ]
            ),
        )
        return ENTER_SCHEDULE


async def show_date_picker(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    # –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥
    now = datetime.now()
    year = now.year
    month = now.month

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü –∏ –≥–æ–¥
    context.user_data["calendar"] = {"year": year, "month": month}

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    calendar_keyboard = generate_calendar_keyboard(year, month)

    await query.edit_message_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏ (—Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: {month}/{year}):",
        reply_markup=InlineKeyboardMarkup(calendar_keyboard),
    )


def generate_calendar_keyboard(year, month):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    import calendar

    # –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    cal = calendar.monthcalendar(year, month)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    keyboard.append(
        [
            InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"cal_prev:{month}:{year}"),
            InlineKeyboardButton(f"{month}/{year}", callback_data="ignore"),
            InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"cal_next:{month}:{year}"),
        ]
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
    days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    keyboard.append([InlineKeyboardButton(day, callback_data="ignore") for day in days])

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –º–µ—Å—è—Ü–∞
    for week in cal:
        row = []
        for day in week:
            if day == 0:
                row.append(InlineKeyboardButton(" ", callback_data="ignore"))
            else:
                row.append(
                    InlineKeyboardButton(
                        str(day), callback_data=f"cal_day:{day}:{month}:{year}"
                    )
                )
        keyboard.append(row)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_create")])

    return keyboard


async def show_time_picker(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏"""
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤
    keyboard = []
    for hour in range(0, 24, 3):
        row = []
        for h in range(hour, min(hour + 3, 24)):
            row.append(
                InlineKeyboardButton(f"{h:02d}:00", callback_data=f"time:{h:02d}:00")
            )
        keyboard.append(row)

    # –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
    keyboard.append(
        [
            InlineKeyboardButton("09:30", callback_data="time:09:30"),
            InlineKeyboardButton("12:30", callback_data="time:12:30"),
            InlineKeyboardButton("18:30", callback_data="time:18:30"),
        ]
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    keyboard.append(
        [InlineKeyboardButton("‚å®Ô∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="time_manual")]
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_create")])

    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:", reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def show_weekday_picker(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã
    if "selected_days" not in context.user_data:
        context.user_data["selected_days"] = []

    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    weekdays = [
        "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "–í—Ç–æ—Ä–Ω–∏–∫",
        "–°—Ä–µ–¥–∞",
        "–ß–µ—Ç–≤–µ—Ä–≥",
        "–ü—è—Ç–Ω–∏—Ü–∞",
        "–°—É–±–±–æ—Ç–∞",
        "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
    ]

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏
    keyboard = []
    for i, day in enumerate(weekdays):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –¥–µ–Ω—å
        is_selected = i in context.user_data["selected_days"]
        checkbox = "‚úÖ" if is_selected else "‚òê"

        keyboard.append(
            [InlineKeyboardButton(f"{checkbox} {day}", callback_data=f"toggle_day:{i}")]
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–º–µ–Ω—ã
    keyboard.append(
        [
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="days_confirmed"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_create"),
        ]
    )

    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:", reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def handle_weekday_toggle(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    day_index = int(query.data.split(":")[1])

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–Ω—è
    if "selected_days" not in context.user_data:
        context.user_data["selected_days"] = []

    if day_index in context.user_data["selected_days"]:
        context.user_data["selected_days"].remove(day_index)
    else:
        context.user_data["selected_days"].append(day_index)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    await show_weekday_picker(query, context)
    return ENTER_SCHEDULE


def get_active_chats(session, send_to_users=True, send_to_groups=True):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Ç–∏–ø—É"""
    query = session.query(Chat).filter(Chat.status == "active")

    if send_to_users and not send_to_groups:
        # –¢–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        query = query.filter(Chat.type == "private")
    elif send_to_groups and not send_to_users:
        # –¢–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª—ã
        query = query.filter(Chat.type.in_(["group", "supergroup", "channel"]))
    # –ï—Å–ª–∏ –æ–±–∞ True - –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã
    # –ï—Å–ª–∏ –æ–±–∞ False - –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    elif not send_to_users and not send_to_groups:
        return []

    return query.all()


async def perform_mailing(bot, mailing_id, status_msg=None):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    sent = 0
    failed = 0

    with db_session() as session:
        mailing = session.query(Mailing).filter_by(mailing_id=mailing_id).first()

        if not mailing:
            logger.error(f"–†–∞—Å—Å—ã–ª–∫–∞ —Å ID {mailing_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        message_text = mailing.message_text

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏
        send_to_users = getattr(mailing, "send_to_users", True)
        send_to_groups = getattr(mailing, "send_to_groups", True)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã –Ω—É–∂–Ω—ã—Ö —Ç–∏–ø–æ–≤
        all_active_chats = get_active_chats(session, send_to_users, send_to_groups)

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —á–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–±—Ä–∞–Ω—ã –¥–ª—è —ç—Ç–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
        recipients = []
        for chat in all_active_chats:
            if chat in mailing.recipients:
                recipients.append((chat.chat_id, chat.title or str(chat.chat_id)))

        total = len(recipients)


# –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–°–°–´–õ–ö–ò
async def edit_message_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    try:
        mailing_id = int(query.data.split(":")[1])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context.user_data["edit_mailing_id"] = mailing_id

        with db_session() as session:
            mailing = session.query(Mailing).filter_by(mailing_id=mailing_id).first()
            current_text = (
                mailing.message_text if mailing and mailing.message_text else ""
            )

        await query.edit_message_text(
            f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n{current_text}\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ ID {mailing_id}:",
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            "‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"mailing:{mailing_id}"
                        )
                    ]
                ]
            ),
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
        context.user_data["awaiting_input"] = "message_text"

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await query.edit_message_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data=f"mailing:{mailing_id}"
                        )
                    ]
                ]
            ),
        )


async def edit_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    try:
        mailing_id = int(query.data.split(":")[1])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context.user_data["edit_mailing_id"] = mailing_id

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        await query.edit_message_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ ID {mailing_id}:\n\n"
            f"1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å\n"
            f"2. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è (—Ñ–æ—Ä–º–∞—Ç: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú)\n"
            f"3. –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ (—Ñ–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú)\n"
            f"4. –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ (—Ñ–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú)\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –∏ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '2 2025-05-15 14:30' –∏–ª–∏ '3 10:00'):",
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            "‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"mailing:{mailing_id}"
                        )
                    ]
                ]
            ),
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        context.user_data["awaiting_input"] = "schedule"

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        await query.edit_message_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data=f"mailing:{mailing_id}"
                        )
                    ]
                ]
            ),
        )


async def handle_awaiting_input(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    input_type = context.user_data.get("awaiting_input")
    mailing_id = context.user_data.get("edit_mailing_id")

    if not input_type or not mailing_id:
        return

    # –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    del context.user_data["awaiting_input"]
    del context.user_data["edit_mailing_id"]

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤–≤–æ–¥–∞
    if input_type == "message_text":
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        new_text = update.message.text

        with db_session() as session:
            mailing = session.query(Mailing).filter_by(mailing_id=mailing_id).first()

            if mailing:
                mailing.message_text = new_text
                session.commit()

        await update.message.reply_text(
            f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ ID {mailing_id} –æ–±–Ω–æ–≤–ª–µ–Ω."
        )

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏
        await show_mailing_menu(update, context, mailing_id)

    elif input_type == "schedule":
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        schedule_input = update.message.text

        try:
            parts = schedule_input.split(maxsplit=1)
            schedule_type = int(parts[0])

            with db_session() as session:
                mailing = (
                    session.query(Mailing).filter_by(mailing_id=mailing_id).first()
                )

                if not mailing:
                    await update.message.reply_text("–û—à–∏–±–∫–∞: —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                    return

                if schedule_type == 1:  # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å
                    mailing.next_run_time = datetime.now()
                    mailing.is_recurring = False

                elif schedule_type == 2:  # –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è
                    try:
                        time_str = parts[1]
                        next_run = datetime.strptime(time_str, "%Y-%m-%d %H:%M")
                        mailing.next_run_time = next_run
                        mailing.is_recurring = False
                    except ValueError:
                        await update.message.reply_text(
                            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú."
                        )
                        return

                elif schedule_type == 3:  # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ
                    try:
                        time_str = parts[1]
                        hours, minutes = map(int, time_str.split(":"))
                        now = datetime.now()
                        next_run = datetime(
                            now.year, now.month, now.day, hours, minutes
                        )

                        if next_run < now:
                            next_run = next_run + timedelta(days=1)

                        mailing.next_run_time = next_run
                        mailing.is_recurring = True
                        mailing.recurrence_interval = "daily"
                    except ValueError:
                        await update.message.reply_text(
                            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú."
                        )
                        return

                elif schedule_type == 4:  # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ
                    try:
                        time_str = parts[1]
                        hours, minutes = map(int, time_str.split(":"))
                        now = datetime.now()
                        next_run = datetime(
                            now.year, now.month, now.day, hours, minutes
                        )

                        if next_run < now:
                            next_run = next_run + timedelta(days=1)

                        mailing.next_run_time = next_run
                        mailing.is_recurring = True
                        mailing.recurrence_interval = "weekly"
                    except ValueError:
                        await update.message.reply_text(
                            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú."
                        )
                        return
                else:
                    await update.message.reply_text(
                        "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 1, 2, 3 –∏–ª–∏ 4."
                    )
                    return

                session.commit()

            await update.message.reply_text(
                f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ ID {mailing_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ."
            )

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏
            await show_mailing_menu(update, context, mailing_id)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö –û–°–ù–û–í–ù–û–ì–û –ú–ï–ù–Æ
async def main_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    keyboard = [
        [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="start_create")],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫", callback_data="open_list")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
    ]

    markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:", reply_markup=markup
    )


async def show_stats_handler(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()

    # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    context.user_data.clear()

    try:
        with db_session() as session:
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Å—ã–ª–æ–∫
            total_mailings = session.query(Mailing).count()

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            sent_messages = session.query(SendLog).count()

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
            try:
                successful = session.query(SendLog).filter_by(status="success").count()
                failed = session.query(SendLog).filter_by(status="failed").count()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –ª–æ–≥–æ–≤: {e}")
                successful = 0
                failed = 0

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º —á–∞—Ç–æ–≤ –∏–∑ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
            from database import get_statistics_by_chat_type

            chat_stats = get_statistics_by_chat_type()

        stats_text = "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫:\n\n"
        stats_text += f"üì® –í—Å–µ–≥–æ —Ä–∞—Å—Å—ã–ª–æ–∫: {total_mailings}\n"
        stats_text += f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {sent_messages}\n"

        if sent_messages > 0:
            success_rate = successful / sent_messages * 100
            stats_text += f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {successful} ({success_rate:.1f}%)\n"
            stats_text += f"‚ùå –û—à–∏–±–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: {failed}\n\n"

        stats_text += "üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∞—Ç–∞–º:\n"
        stats_text += f"‚Ä¢ –í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {chat_stats['total']['all']}\n"
        stats_text += f"  ‚úì –ê–∫—Ç–∏–≤–Ω—ã—Ö: {chat_stats['total']['active']}\n"
        stats_text += f"  ‚úó –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {chat_stats['total']['blocked']}\n\n"

        stats_text += "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
        stats_text += f"‚Ä¢ –í—Å–µ–≥–æ: {chat_stats['users']['all']}\n"
        stats_text += f"  ‚úì –ê–∫—Ç–∏–≤–Ω—ã—Ö: {chat_stats['users']['active']}\n"
        stats_text += f"  ‚úó –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {chat_stats['users']['blocked']}\n\n"

        stats_text += "üë• –ì—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª—ã:\n"
        stats_text += f"‚Ä¢ –í—Å–µ–≥–æ: {chat_stats['groups']['all']}\n"
        stats_text += f"  ‚úì –ê–∫—Ç–∏–≤–Ω—ã—Ö: {chat_stats['groups']['active']}\n"
        stats_text += f"  ‚úó –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {chat_stats['groups']['blocked']}\n"

        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(stats_text, reply_markup=markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = [
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}", reply_markup=markup
        )


async def show_list_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é"""
    # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å—É–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞
    await list_mailings(update, context)


# –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–• –ò–ó MINI APP
async def handle_webapp_data(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏–∑ Mini App"""
    if not await is_admin(update.effective_user.id):
        return

    try:
        data = json.loads(update.effective_message.web_app_data.data)
        mailing_id = data.get("mailing_id")
        selected_chats = data.get("selected_chats", [])

        if not isinstance(selected_chats, list):
            await update.message.reply_text("–ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Mini App.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–¥–µ—Ç –ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π
        if mailing_id == "temp":
            # –≠—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if "temp_mailing" in context.user_data:
                context.user_data["temp_mailing"]["selected_chats"] = selected_chats

                await update.message.reply_text(
                    f"–ü–æ–ª—É—á–∞—Ç–µ–ª–∏ –¥–ª—è –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—ã–±—Ä–∞–Ω—ã.\n"
                    f"–í—ã–±—Ä–∞–Ω–æ {len(selected_chats)} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π.\n\n"
                    f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏:"
                )

                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è
                keyboard = [
                    [
                        InlineKeyboardButton(
                            "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="finish_create"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="cancel_create"
                        )
                    ],
                ]

                await update.message.reply_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard)
                )

                # –ó–¥–µ—Å—å –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º finish_create, –∂–¥–µ–º –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É

            else:
                await update.message.reply_text(
                    "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–∞."
                )

        else:
            # –≠—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏
            try:
                mailing_id = int(mailing_id)

                with db_session() as session:
                    # –ù–∞—Ö–æ–¥–∏–º —Ä–∞—Å—Å—ã–ª–∫—É
                    mailing = (
                        session.query(Mailing).filter_by(mailing_id=mailing_id).first()
                    )

                    if not mailing:
                        await update.message.reply_text(
                            f"–†–∞—Å—Å—ã–ª–∫–∞ —Å ID {mailing_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
                        )
                        return

                    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
                    mailing.recipients = []

                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
                    for chat_id in selected_chats:
                        chat = session.query(Chat).filter_by(chat_id=chat_id).first()
                        if chat:
                            mailing.recipients.append(chat)

                    session.commit()
                    recipient_count = len(mailing.recipients)

                await update.message.reply_text(
                    f"–ü–æ–ª—É—á–∞—Ç–µ–ª–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ ID {mailing_id} –æ–±–Ω–æ–≤–ª–µ–Ω—ã.\n"
                    f"–í—ã–±—Ä–∞–Ω–æ {recipient_count} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π."
                )

                # –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏
                await show_mailing_menu(update, context, mailing_id)

            except ValueError:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ä–∞—Å—Å—ã–ª–∫–∏.")
                return

    except json.JSONDecodeError:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Mini App.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Mini App: {e}")
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


# –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–ï –ò –ü–†–û–í–ï–†–ö–ê –†–ê–°–°–´–õ–û–ö
async def post_init(application: Application) -> None:
    """–î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞"""

    # –í–º–µ—Å—Ç–æ JobQueue –∏—Å–ø–æ–ª—å–∑—É–µ–º asyncio –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
    async def periodic_check():
        while True:
            try:
                await check_mailings(application)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫: {e}")
            await asyncio.sleep(60)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    asyncio.create_task(periodic_check())

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")


async def check_mailings(application: Application) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫"""
    now = datetime.now()

    with db_session() as session:
        # –ù–∞—Ö–æ–¥–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
        mailings = (
            session.query(Mailing)
            .filter(Mailing.next_run_time <= now, Mailing.next_run_time != None)
            .all()
        )

        for mailing in mailings:
            logger.info(f"–ó–∞–ø—É—Å–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ ID {mailing.mailing_id}")
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏
            await perform_mailing(application.bot, mailing.mailing_id)


async def chat_join_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ —á–∞—Ç"""
    chat = update.effective_chat

    if not chat:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ - —ç—Ç–æ –Ω–∞—à –±–æ—Ç
    if context.bot.id in [member.user.id for member in update.message.new_chat_members]:
        with db_session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –æ —á–∞—Ç–µ
            existing_chat = session.query(Chat).filter_by(chat_id=chat.id).first()

            if existing_chat:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                existing_chat.status = "active"
                existing_chat.last_active = datetime.now()
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ —á–∞—Ç–µ
                new_chat = Chat(
                    chat_id=chat.id,
                    type=chat.type,
                    title=chat.title or str(chat.id),
                    status="active",
                )
                session.add(new_chat)

            session.commit()

        logger.info(f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç: {chat.id} ({chat.title})")


async def chat_leave_handler(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞ –∏–∑ —á–∞—Ç–∞"""
    chat = update.effective_chat

    if not chat:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–¥–∞–ª–µ–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ - —ç—Ç–æ –Ω–∞—à –±–æ—Ç
    if (
        update.message.left_chat_member
        and update.message.left_chat_member.id == context.bot.id
    ):
        with db_session() as session:
            # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å –æ —á–∞—Ç–µ
            chat_record = session.query(Chat).filter_by(chat_id=chat.id).first()

            if chat_record:
                # –ü–æ–º–µ—á–∞–µ–º —á–∞—Ç –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π
                chat_record.status = "left"
                chat_record.last_error = "–ë–æ—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ —á–∞—Ç–∞"
                session.commit()

        logger.info(f"–ë–æ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ —á–∞—Ç–∞: {chat.id} ({chat.title})")


def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.environ.get("TELEGRAM_BOT_TOKEN")

    if not token:
        logger.error(
            "–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN."
        )
        return

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã)
    from database import create_tables

    create_tables()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    defaults = Defaults(
        parse_mode=None
    )  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ None

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Application —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    application = (
        Application.builder()
        .token(token)
        .defaults(defaults)
        .post_init(post_init)
        .build()
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
    create_conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("create", create),
            CallbackQueryHandler(start_create_handler, pattern="^start_create$"),
        ],
        states={
            ENTER_MESSAGE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, enter_message),
                CallbackQueryHandler(cancel_create_handler, pattern="^cancel_create$"),
            ],
            ENTER_SCHEDULE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, enter_schedule),
                CallbackQueryHandler(cancel_create_handler, pattern="^cancel_create$"),
            ],
            SELECT_RECIPIENTS: [
                CallbackQueryHandler(finish_create_handler, pattern="^finish_create$"),
                CallbackQueryHandler(cancel_create_handler, pattern="^cancel_create$"),
                MessageHandler(
                    filters.ALL & ~filters.COMMAND, lambda u, c: SELECT_RECIPIENTS
                ),
            ],
        },
        fallbacks=[CommandHandler("cancel", lambda u, c: ConversationHandler.END)],
        per_user=True,
        name="create_mailing_conversation",
    )
    application.add_handler(create_conv_handler)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("list", list_mailings))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
    application.add_handler(
        CallbackQueryHandler(main_menu_handler, pattern="^main_menu$")
    )
    application.add_handler(
        CallbackQueryHandler(show_list_handler, pattern="^open_list$")
    )
    application.add_handler(
        CallbackQueryHandler(show_stats_handler, pattern="^show_stats$")
    )
    application.add_handler(CallbackQueryHandler(handle_pagination, pattern="^page:"))
    application.add_handler(
        CallbackQueryHandler(show_mailing_menu, pattern="^mailing:")
    )
    application.add_handler(CallbackQueryHandler(send_mailing_now, pattern="^send:"))
    application.add_handler(
        CallbackQueryHandler(refresh_status, pattern="^refresh_status:")
    )
    application.add_handler(
        CallbackQueryHandler(edit_message_text, pattern="^edit_message:")
    )
    application.add_handler(
        CallbackQueryHandler(edit_schedule, pattern="^edit_schedule:")
    )
    application.add_handler(
        CallbackQueryHandler(list_mailings, pattern="^back_to_list$")
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç Mini App
    application.add_handler(
        MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_webapp_data)
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –≤–≤–æ–¥–∞
    application.add_handler(
        MessageHandler(
            filters.TEXT & ~filters.COMMAND & filters.UpdateType.MESSAGE,
            handle_awaiting_input,
        )
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
    # –í–∞–∂–Ω–æ: —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ ConversationHandler –∏ –ø–µ—Ä–µ–¥ –æ–±—ã—á–Ω—ã–º–∏ CommandHandler
    command_interrupt_handler = MessageHandler(
        filters.COMMAND, handle_command_during_conversation
    )
    application.add_handler(command_interrupt_handler, group=1)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —á–∞—Ç–æ–≤
    application.add_handler(
        MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, chat_join_handler)
    )
    application.add_handler(
        MessageHandler(filters.StatusUpdate.LEFT_CHAT_MEMBER, chat_leave_handler)
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()


if __name__ == "__main__":
    main()
